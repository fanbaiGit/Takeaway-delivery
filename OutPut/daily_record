2019.5.11
1.将骑手的数据结构由链表更改为结构体数组。
2.完成划区域部分代码

2019 5. 13
1.新创建整数型数组const int dir[9] = {0, 1, 2, 3, 4, 5, 6, 7, 8}; 
以表示必经点与骑手的方向关系：1为左，2为右，3为上，4为下，5为左上，6为左下，7为右上，8为右下
2.新创建函数int Direction(int ordx, int ordy, int riderx, int ridery) 
判断必经点与骑手的方向关系
3.在骑手结构体里新创建int型变量int curDir以记录当前骑手前往的方向
4.在订单结构体里新创建int型变量int state以订单现处于的状态
状态分配：1为骑手未取到订单，2为骑手正在派送给买家
5。完成派送部分的子函数（及其功能函数）

2019.5.14
1.在骑手结构体数组里新创建orderList HeadOrd以标记骑手订单链表的首地址
2.完善派送部分的代码
3.决定用贪心算法，选择恰当范围，在范围内尽量经过更多的必经点。（初始版本1）
4.初步完成BFS模块，仍需思考优先级的权比，可在后期依靠经验完善

2019.5.15
1.根据骑手行走路径的特点，将骑手划分两个状态，0为在水平道路上，1为在竖直道路上。在骑手结构体里新创建int型变量int state。
2。地图里横纵坐标均以1开始。
3.将路径数据结构改为三维数组const int dic[2][6][2] = {{-2, 0}, {2, 0}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1}, {0, -2}, {0, 2}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1}}; //标记骑手的移动方向
//骑手在状态0下：0为向左，1为向右，2为左上，3为右上，4为左下，5为右下
//骑手在状态1下：0为向上，1为向下，2为左上，3为右上，4为左下，5为右下
4.在订单结构体里新创建int leftime计算剩余时间，int ord_geatDis计算餐厅到买家距离（初始化时计算好）
5.新创建结构体数组mapNode keyNode以传送BFS寻找到的关键点
6.初步完成规划部分代码

2019.5.16
1.初步将两人代码进行整合
2.继续完善核心代码，应更多注意两组关键点不同相对方向下的决策

2019.5.17
1.将三维数组改为二维数组const int dic[12][2] = {{-2, 0}, {2, 0}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1}, {0, -2}, {0, 2}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1}}; //标记骑手的移动方向
状态0时使用0-5方向，状态1时使用6-11方向。使用规则：6*state+path

2019.5.18
1.暂时决定不分区域，待全部完成再看效果
2.仍有核心区域代码未完成，决定再加入一组关键点地址，综合决策以提高效率
3.加入骑手订单排序算法，对骑手的订单按剩余时间多少进行升序排序，但不应影响骑手目前订单的派送

2019.5.19
1.所有板块基本完成，开始调试，仍有逻辑错误

2019.5.20
1.程序终于可以开始运行！！！！（撒花庆祝！！）
2.对于餐厅与食客在同一位置的情况仍需要加以考虑
3.目前各个子函数基本可以正常工作，阉割版的程序应该可以运行
4.争取明天通过老师所给测试数据

2019.5.21
1.在dir数组里新加dir=0的情况，以标记两点位置相同的情况，但在实际操作时应尽量避免该情况
2.更改骑手路径策略，尽量走直线。
3.添加RUN=3的情况，当程序出现异常时，跳出。
4.在int Dir_Path函数中添加对边界条件的考虑
5.已完成了三组数据，可喜可贺！但是在测试第四组数据时发现存在骑手的订单链表，头指针与后边节点脱节的情况，需要继续改进！

2019.5.22
1.添加void Account()//对每一时间单元的状态进行结算,分担 execute的任务
2.需设计对待命骑手的管理方法
3.对于骑手链表的优化,选择用插入排序
4.终于修复了99%的BUG,现在需要对一些特殊情况进行考虑。
5.从实际效果来看，排序算法所得优化适得其反，应重新考量优先级的选择与权重
6.在骑手结构体里新添加int finishTime以计算骑手完成当前订单所用时间。便于以后优化骑手分派算法。（感谢吕昂小伙的建议）
7.基本完成BFS模块的编写，但在调试阶段出现问题。需要继续修复。
8.今早再战！！！ 2019.5.23 3：17记ö

2019.5.24
1.成功将先知优化板块与BFS优化板块整合，优化效率达到预期水平
2.修复链表部分玄学BUG，不应该盲目相信自身水平
3.用时七小时修复代码，起死回生！！
4.NB！工作量估计占95%。
2019.5。25 12：04
